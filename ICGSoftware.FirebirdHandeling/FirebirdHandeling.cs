using FirebirdSql.Data.FirebirdClient;
using ICGSoftware.GetAppSettings;
using ICGSoftware.LogHandeling;
using Newtonsoft.Json.Linq;

namespace ICGSoftware.FirebirdHandeling
{
    public class FirebirdDBHandeling(AppSettingsClassDev settings, AppSettingsClassConf confidential, Logging Logging)
    {
        private readonly Logging _log = Logging;



        public async Task Process(string ouputFolderpath)
        {
            string errorsFolder = ouputFolderpath;

            string outputFolderPathForDB;

            if (settings.outputFolderPathForDB == "")
            {
                if (settings.outputFolderPath == "")
                {
                    outputFolderPathForDB = settings.inputFolderPaths[0] + "\\DBFolder";
                }
                else
                {
                    outputFolderPathForDB = settings.outputFolderPath + "\\DBFolder";
                }
            }
            else
            {
                outputFolderPathForDB = settings.outputFolderPathForDB;
            }

            string outputFileForDB = outputFolderPathForDB + settings.DBDatabase;
            string connectionString = $"Database={outputFileForDB};DataSource={settings.DBDataSource};User={settings.DBUser};Password={confidential.DBPassword};Charset=UTF8;Dialect=3;Port={settings.DBPort}";

            await CreateDatabase(outputFolderPathForDB, outputFileForDB, connectionString);
            await CreateTablesAndInsertData(errorsFolder, connectionString);

        }



        public async Task CreateDatabase(string outputFolderPathForDB, string outputFileForDB, string connectionString)
        {
            Console.WriteLine("Creating database at: " + outputFileForDB);
            if (!File.Exists(outputFileForDB))
            {
                if (!Directory.Exists(outputFolderPathForDB)) { Directory.CreateDirectory(outputFolderPathForDB); }
                FbConnection.CreateDatabase(connectionString, pageSize: 4096, forcedWrites: true);
                _log.log("info", "Database created at: " + outputFileForDB);
            }
        }



        public async Task CreateTablesAndInsertData(string errorsFolder, string connectionString)
        {
            string suffix = DateTime.Now.ToString("yyyyMMdd_HHmmss");
            string errorsTable = $"Errors_{suffix}";
            string timestampsTable = $"ErrorTimestamps_{suffix}";

            // Read JSON content
            string jsonContent = File.ReadAllText(errorsFolder);
            var objects = new List<JObject>();
            var parts = jsonContent.Split(new[] { "}\n{" }, StringSplitOptions.None);
            foreach (var part in parts)
            {
                string fixedJson = part;
                if (!fixedJson.StartsWith("{")) fixedJson = "{" + fixedJson;
                if (!fixedJson.EndsWith("}")) fixedJson += "}";
                objects.Add(JObject.Parse(fixedJson));
            }

            using (var con = new FbConnection(connectionString))
            {
                con.Open();

                // Always create new tables with unique names
                ExecuteNonQuery(con, $@"
                CREATE TABLE {errorsTable} (
                    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    ErrorText VARCHAR(512),
                    Occurrences VARCHAR(50)
                );
            ");

                ExecuteNonQuery(con, $@"
                CREATE TABLE {timestampsTable} (
                    ErrorID INTEGER,
                    ""Timestamp"" TIMESTAMP,
                    FOREIGN KEY (ErrorID) REFERENCES {errorsTable}(ID)
                );
            ");

                // Insert data
                foreach (var obj in objects)
                {
                    foreach (var prop in obj.Properties())
                    {
                        string errorText = prop.Name;
                        var details = prop.Value;
                        string occurred = details["Aufgetreten"]?.ToString();
                        var timestamps = details["Timestamps"]?.ToObject<List<string>>() ?? new List<string>();

                        // Insert into Errors_YYYYMMDD_HHmmss
                        long errorId;
                        using (var cmd = new FbCommand($"INSERT INTO {errorsTable} (ErrorText, Occurrences) VALUES (@text, @occ) RETURNING ID", con))
                        {
                            cmd.Parameters.AddWithValue("@text", errorText);
                            cmd.Parameters.AddWithValue("@occ", occurred);
                            errorId = Convert.ToInt64(cmd.ExecuteScalar());
                        }

                        // Insert timestamps
                        foreach (var ts in timestamps)
                        {
                            var cleanTs = ts.Split('+')[0];
                            if (DateTime.TryParse(cleanTs, out DateTime dt))
                            {
                                using (var tsCmd = new FbCommand($"INSERT INTO {timestampsTable} (ErrorID, \"Timestamp\") VALUES (@id, @ts)", con))
                                {
                                    tsCmd.Parameters.AddWithValue("@id", errorId);
                                    tsCmd.Parameters.AddWithValue("@ts", dt);
                                    tsCmd.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                }

                Console.WriteLine($"Import completed. Tables created: {errorsTable}, {timestampsTable}");
            }

        }



        private static void ExecuteNonQuery(FbConnection con, string sql)
        {
            using (var cmd = new FbCommand(sql, con))
            {
                cmd.ExecuteNonQuery();
            }
        }
    }
}
